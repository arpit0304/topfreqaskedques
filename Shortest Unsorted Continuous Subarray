https://leetcode.com/problems/shortest-unsorted-continuous-subarray/description/

O(n) time & space
class Solution {
public:
    int findUnsortedSubarray(vector<int>& nums) {
        int n = nums.size();
        stack<int>s,s1;
        s.push(0);
        int mn=n-1;
        for(int i=1;i<n;i++){
           if(nums[i]>=nums[i-1]) s.push(i);

            
                while(!s.empty()&&nums[s.top()]>nums[i]) {mn=min(s.top(),mn); s.pop();}
            
        }
        cout<<mn<<" ";
        if(s.size()==n) return 0;
        
        s1.push(n-1);
        int mx=0;
        for(int i=n-2;i>=0;i--){
            if(nums[i]<=nums[i+1]) s1.push(i);

            
            while(!s1.empty()&&nums[s1.top()]<nums[i]) {mx=max(mx,s1.top());s1.pop();}
            
        }
        
        cout<<mx<<" .";
        if(mn==n-1&&mx==0)return n;
        return mx-mn+1;
    }
};

O(n) time & O(1) space
class Solution {
public:
    int findUnsortedSubarray(vector<int>& nums) {
        int n = nums.size();
        int mn=n-1, i=1,j;
        for(;i<n;i++){
            if(nums[i]<nums[i-1]){
                j=i-1;
                while(j>=0&&nums[j]>nums[i]) {mn=min(j,mn); j--;}
            }
            
        }
        cout<<mn<<" ";
        if(mn==n-1) return 0;
        int mx=0;
        for(int i=n-2;i>=0;i--){
            if(nums[i]>nums[i+1]){
                j=i+1;
                while(j<n&&nums[j]<nums[i]) {mx=max(mx,j);j++;}
            }
            
        }
        
        cout<<mx<<" .";
        if(mn==n-1&&mx==0)return n;
        return mx-mn+1;
    }
};
