https://leetcode.com/problems/largest-divisible-subset/description/

class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n=nums.size();
        sort(nums.begin(),nums.end());
        int dp[n][2];
        for(int i=0;i<n;i++){
            dp[i][0]=1;
            dp[i][1]=i;
        }
        int mx=0,pos=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<i;j++){
                if(nums[i]%nums[j]==0&&(dp[j][0]+1)>dp[i][0]){
                    dp[i][0]=dp[j][0]+1;
                    if(mx<dp[i][0]){
                        mx=dp[i][0];
                        pos=i;
                    }
                    dp[i][1]=j;
                }
            }
        }
        vector<int>ans(max(mx,1));
        cout<<pos;
        for(int i=max(mx,1)-1;i>=0;i--){
            ans[i]=nums[pos];
            pos=dp[pos][1];
        }
        return ans;
    }
};
